<? dofile("modules/rumblelua/libpie.lua"); ?>
<? my.debug = false; ?>
<h2><img src="../icons/server.png" alt="server" width="128" height="136" hspace="5" align="left">Server info:</h2>
<p><strong>Operating environment: </strong>
  <?=session.info.os?> (<?=session.info.arch?> bit)<br>
  <strong>Server version:</strong>
<?=session.info.version?>
<br>
<strong>Uptime:</strong> 
<?
local hours = math.floor(session.info.uptime/3600);
local minutes = math.floor(math.fmod(session.info.uptime, 3600)/60);
local seconds = math.fmod(session.info.uptime, 60);
local tacc, trej = 0,0;

printf(string.format("%02u:%02u:%02u",  hours,minutes,seconds));
?>

</p>

<p>&nbsp;</p>

<table width="700" class="elements" border="0">
  <tr>
    <th width="109">Service</th>
    <th width="164">Status</th>
    <th width="159">Busy/Idle workers</th>
    <th width="112">Jobs handled</th>
    <th width="164">Traffic</th>
  </tr>
<?
	my.shares = {{0,0,0,0},{0,0,0,0}};
	local total = 0;
	local totalJobs = 0;
	local totalIdle = 0;
	local totalWorking = 0;
    for k,v in pairs({"pop3", "imap4", "smtp", "mailman"}) do
        local svc = Rumble.serviceInfo(v);
		if (my.debug) then
			svc.received = math.random(0,1200000);
	    	svc.sent = math.random(0,12000000);
			svc.sessions = math.random(1,320);
		end
		if (svc) then
			my.shares[1][k] = my.shares[1][k] + svc.sessions;
			my.shares[2][k] = my.shares[2][k] + svc.sent + svc.received;
		end
		local status = (svc.enabled == 1 and "Running") or (svc.enabled == 0 and "Stopped") or "Paused";
		local icon = "<img src='/icons/service_" .. status:lower() .. ".png' align='absmiddle' />";
		local traffic = math.comma(svc.received + svc.sent);
		total = total + svc.received + svc.sent;
		totalJobs = totalJobs + svc.sessions;
		totalIdle = totalIdle + svc.idle;
		totalWorking = totalWorking + svc.busy;
		local actions = "";
		if (session.credentials and session.credentials.admin) then
			if (svc.enabled == 0) then actions = string.format([[
				<a href='/services:%s?start=true'><img hspace='10' src="/icons/control_play_blue.png"></a>
				]], v);
			end
			if (svc.enabled == 1) then actions = string.format([[
				<a href='/services:%s?stop=true'><img src="/icons/control_stop_blue.png"></a>
				<a href='/services:%s?pause=true'><img src="/icons/control_pause_blue.png"></a>
				]], v,v);
			end
			if (svc.enabled == 2) then actions = string.format([[
				<a href='/services:%s?stop=true'><img src="/icons/control_stop_blue.png"></a>
				<a href='/services:%s?start=true'><img src="/icons/control_play_blue.png"></a>
				]], v,v);
			end
		end
		printf("<tr><td>%s <a href='/services:%s'>%s</a></td><td>%s %s</td><td align='right'>%u / %u</td><td align='right'>%u</td><td align='right'>%s bytes</td></tr>", actions, v, v:upper(), icon, status, svc.busy, svc.idle, svc.sessions, traffic);
    end

	printf("<tr style='color:#371; font-weight: bold;'><td colspan='2' align='right'>Totals:</td><td align='right'>%s / %s</td><td align='right'>%s</td><td align='right'>%s bytes</td></tr>", math.comma(totalWorking), math.comma(totalIdle), math.comma(totalJobs), math.comma(total) or "0");
?>



</table>
<p>&nbsp;</p>
<?
if (Rumble.readConfig("servername") == "mydomain.tld") then
	printf("<div class='notification'>Note: Your hostname (mydomain.tld) is <font color='#a30'>incorrect</font>.<br/>Please go to the <a href='/settings'>Server settings</a> page and correct this.</div>");
end

local poplog = {};
local smtplog = {};
local rejections = {};
local now = os.time();
local rj = 0;
for i=1,13,1 do
	poplog[i] = {0,0};
	smtplog[i] = {0,0};
	rejections[i] = 0;
-- For testing purposes: --
	if (my.debug) then
		poplog[i] = {math.random(1,50),math.random(1,500000)};
		smtplog[i] = {math.random(1,60),math.random(1,1500000)};
		rejections[i] = math.random(1,25);
	end
end

local shares = {{0,0,0,1},{0,0,0,1}};
local i = 0;
local t = Rumble.trafficInfo("pop3");
local d = 1.9999;
if (t) then
	for k,v in pairs(t) do
		i = math.floor(k/d)+1;
		poplog[i][1] = poplog[i][1] + v[1];
		poplog[i][2] = poplog[i][2] + v[2];
		rejections[i] = rejections[i] + v[3];
				rj = rj + v[3];
	end
end

t = Rumble.trafficInfo("imap4");
if (t) then
	for k,v in pairs(t) do
		i = math.floor(k/d)+1;
		poplog[i][1] = poplog[i][1] + v[1];
		poplog[i][2] = poplog[i][2] + v[2];
		rejections[i] = rejections[i] + v[3];
				rj = rj + v[3];
	end
end

t = Rumble.trafficInfo("smtp");
if (t) then
	for k,v in pairs(t) do
		i = math.floor(k/d)+1;
		smtplog[i][1] = smtplog[i][1] + v[1];
		smtplog[i][2] = smtplog[i][2] + v[2];
		rejections[i] = rejections[i] + v[3];
				rj = rj + v[3];

	end
end

t = Rumble.trafficInfo("mailman");
if (t) then
	for k,v in pairs(t) do
		i = math.floor(k/d)+1;
		smtplog[i][1] = smtplog[i][1] + v[1];
		smtplog[i][2] = smtplog[i][2] + v[2];
		rejections[i] = rejections[i] + v[3];
		rj = rj + v[3];
	end
end

local maxHits = 1;
local maxBytes = 1;

for i=1,12,1 do
	if (smtplog[i][1] > maxHits) then maxHits = smtplog[i][1]; end
	if (smtplog[i][2] > maxBytes) then maxBytes = smtplog[i][2]; end
	if (poplog[i][1] > maxHits) then maxHits = poplog[i][1]; end
	if (poplog[i][2] > maxBytes) then maxBytes = poplog[i][2]; end
end
local p = 0;
for k, v in pairs({10,50,100,500,1000,5000,10000,50000,100000,300000,500000,1000000,3000000,5000000,10000000,50000000,100000000,1000000000,10000000000}) do
	if (maxHits > p and maxHits < v) then maxHits = v; end
	if (maxBytes > p and maxBytes < v) then maxBytes = v; end
	p = v;
end

local abbr = {1, "bytes"};
if (maxBytes > 1000) then abbr = {1000, "KB"}; end
if (maxBytes > 1000000) then abbr = {1000000, "MB"}; end
if (maxBytes > 1000000000) then abbr = {1000*1000*1000, "GB"}; end
local units = [[
<text class="units" x="0" y="209"> 0 hits</text>
<text class="units" x="795" y="209" text-anchor="end">      0 ]]..abbr[2]..[[ -</text>
<polyline fill="none" style="opacity:0.5;" stroke="grey" stroke-width="1" points="0,209 800,209"/>  
]];
for i=1,4,1 do
	local y = 209-(i*42.5)
	units = units .. string.format([[
	<polyline fill="none" style="opacity:0.5;" stroke="grey" stroke-width="1" points="0,%u 800,%u"/>  
	<text class="units" x="0" y="%u"> %s hits</text>
	<text class="units" style='text-align:left; width: 100px;' x="795" text-anchor="end" y="%u">%5s %s -</text>
	]], y,y,y, math.comma(maxHits*(i/4)), y, math.comma((maxBytes/abbr[1])*(i/4)), abbr[2]);
end

local pixelPerByte = 170/maxBytes;
local pixelPerHit = 170/maxHits;

local popboxes = "";
local popcoords = "";

local smtpboxes = "";
local smtpcoords = "";
local rejectcoords = "";

for i=12,1,-1 do
	local bytes,hits,x = poplog[i][2], poplog[i][1], ((740/12)*(12-i))+40;
	local rhits = rejections[i];
	popcoords = popcoords .. x+10 .. "," .. 205-(hits*pixelPerHit) .. " ";
	rejectcoords = rejectcoords .. x+10 .. "," .. 205-(rhits*pixelPerHit) .. " ";
	popboxes = popboxes .. string.format(
	'<rect x="%u" y="%u" width="24px" height="%upx" style="fill:rgb(42,107,166);fill-opacity:0.75;" stroke="blue"/>',
	x-12, 209-(bytes*pixelPerByte), 2+(bytes*pixelPerByte));
end

for i=12,1,-1 do
	local bytes,hits,x = smtplog[i][2], smtplog[i][1], ((740/12)*(12-i))+40;
	smtpcoords = smtpcoords .. x+10 .. "," .. 205-(hits*pixelPerHit) .. " ";
    smtpboxes = smtpboxes .. string.format(
	'<rect x="%u" y="%u" width="24px" height="%upx" style="fill:rgb(107,166,42);fill-opacity:0.75;" stroke="green"/>',
	x+12, 209-(bytes*pixelPerByte), 2+(bytes*pixelPerByte));
end


local f = io.open(session.path .. "/traffic_snapshot2.svg", "w");
if (f) then
	f:write([=[
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="800" height="220" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<defs>
		<linearGradient id="backgroundGradient" gradientTransform="rotate(90)">
			<stop offset="10%" stop-color="#e1e9a0" />
			<stop offset="90%" stop-color="#eff4be" />
		</linearGradient>
		<style type="text/css">
			<![CDATA[
				 .caption {font-weight:bold;font-size:15px;font-family:Arial}
				 .units {font-weight:normal;font-size:10px;font-family:Arial}
			]]>
		</style>
		
		<symbol id="crossingPoint" overflow="visible">
			<circle cx="0" cy="0" r="3000" style="fill:rgb(12,166,107);fill-opacity:0.8;
				stroke:rgb(0,0,0);stroke-width:300" />
  		 </symbol>
	</defs>
	<g id="background" fill="url(#backgroundGradient)" >
		<rect x="0" y="0" width="800px" height="220px" stroke="black"/>
	</g>
	
	
	<g id="drawing">
		]=]..popboxes.. smtpboxes..[=[ 
		<polyline fill="none" stroke="blue" stroke-width="2" points="]=]..popcoords..[=["/>  
		<polyline fill="none" stroke="green" stroke-width="2" points="]=]..smtpcoords..[=["/>  
		<polyline fill="none" stroke="red" stroke-width="2" points="]=]..rejectcoords..[=["/> 
	</g>
	<g id="units">
	]=]..units..[=[
	</g>
	
</svg>
]=]);
	f:close();
	
end

--[[
Pie charts!!
]]--
local f = io.open(session.path .. "/traffic_piechart_shares.svg", "w");
local chart = LibPie:new();

if (f) then
	local pies = "";
	for i, what in pairs({"Sessions", "Data (bytes)"}) do
		local pie = chart:newPie(what);
		pie.title = what;
		local x = 200 + ((i-1)*350); -- 200 or 550

		for k,svcName in pairs({"pop3", "imap", "smtp", "mailman"}) do
			pie:addShare(svcName, my.shares[i][k]);
		end
		pie:showNumbers(true);
		pie:showNames(true);
		pies = pies .. pie:plot(x, 120, 140, 140);
	end
	f:write([[
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="800" height="220" version="1.1" xmlns="http://www.w3.org/2000/svg">
<defs>
		<linearGradient id="backgroundGradient" gradientTransform="rotate(90)">
			<stop offset="10%" stop-color="#e1e9a0" />
			<stop offset="90%" stop-color="#eff4be" />
		</linearGradient>
</defs>
<g id="background" fill="url(#backgroundGradient)" >
		<rect x="0" y="0" width="800px" height="220px" stroke="black"/>
	</g>

<!-- Pie chart sample -->
]]..pies..[[

</svg>
	]]);

	f:close();
	
end

?>
<table class="elements" style="width: 800px;">
<tr><th>Traffic shares across services:</th></tr>
<tr><td>
  <object data="/traffic_snapshot2.svg" type="image/svg+xml" width="800" height="220"> </object>
</td></tr>
</table>
<p align="center">
<table class="elements" style="width: 800px;">
<tr><th>Traffic shares across services:</th></tr>
<tr><td>
  <object data="/traffic_piechart_shares.svg" type="image/svg+xml" width="800" height="220"> </object>
</td></tr></table>
  
</p>
